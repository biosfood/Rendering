#pragma kernel trace
#pragma kernel reset

RWStructuredBuffer<float3> light;
uint width, height,  bounces;
float3 position, viewDirection;
float3 up, sunDirection;
float sunStrength;

static const float PI = 3.14159265f;

struct Ray {
    float3 origin;
    float3 direction;
};

struct Material {
    float4 color;
    float specular;
    float4 specularColor;
    float metal;
    float4 emissionColor;
    float emissionStrength;
    float4 tint;
    float refractiveIndex, refractionProbability;
    float passProbability;
    int next;
};

RWStructuredBuffer<Material> materials;

struct RayHit {
    bool hit, fromInside;
    float3 position, normal;
    float distance;
    Material material;
};

struct Sphere {
    float3 position;
    float radius;
    int material;
};

RWStructuredBuffer<Sphere> spheres;
int sphereCount;

struct Box {
    float3 a, b;
    int material;
};

RWStructuredBuffer<Box> boxes;
int boxCount;

uint Hash(inout uint s) {
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float random(inout uint seed) {
    return float(Hash(seed)) / 4294967295.0;
}

float randomNormal(inout uint seed) {
    float theta = 2 * PI * random(seed);
    float rho = sqrt(-2*log(random(seed)));
    return rho * cos(theta);
}

float3 randomDirection(inout uint seed) {
    return normalize(float3(randomNormal(seed), randomNormal(seed), randomNormal(seed)));
}

float3 randomHemisphereDirection(inout uint seed, float3 normal) {
    float3 direction = randomDirection(seed);
    return direction * sign(dot(direction, normal));
}

[numthreads(8,8,1)]
void reset(uint3 id : SV_DispatchThreadID) {
    int index = id.x + id.y * width;
    light[index] = float3(0, 0, 0);
}

RayHit testSphere(Ray ray, Sphere sphere) {
    RayHit result;
    result.hit = false;
    float3 ap = sphere.position-ray.origin;
    float b =  2 * dot(ap, ray.direction);
    float c = dot(ap,ap)-sphere.radius * sphere.radius;
    float D = b*b - 4*c;
    float sqrtD = sqrt(D);
    result.fromInside = c < 0;
    float lambda = result.fromInside ? (b + sqrtD)/2 : (b-sqrtD)/2;
    result.hit = D > 0 && lambda > 0;
    float3 x = ray.origin + lambda * ray.direction;
    result.normal = normalize(x-sphere.position);
    result.position = x;
    result.distance = lambda;
    result.material = materials[sphere.material];
    return result;
}

RayHit testBox(Ray ray, Box box) {
    RayHit result;

    float aDistance = (box.a.x - ray.origin.x)/ray.direction.x;
    float bDistance = (box.b.x - ray.origin.x)/ray.direction.x;

    float xMin = min(aDistance, bDistance);
    float xMax = max(aDistance, bDistance);

    aDistance = (box.a.y - ray.origin.y)/ray.direction.y;
    bDistance = (box.b.y - ray.origin.y)/ray.direction.y;

    float yMin = min(aDistance, bDistance);
    float yMax = max(aDistance, bDistance);

    aDistance = (box.a.z - ray.origin.z)/ray.direction.z;
    bDistance = (box.b.z - ray.origin.z)/ray.direction.z;

    float zMin = min(aDistance, bDistance);
    float zMax = max(aDistance, bDistance);

    float maxDistance = min(xMax, min(yMax, zMax));
    float minDistance = max(xMin, max(yMin, zMin));

    result.hit = maxDistance >= minDistance && minDistance > 0;
    result.distance = minDistance;
    result.position = ray.origin + result.distance * ray.direction;
    // TODO
    result.fromInside = false;
    if (minDistance == xMin) {
        result.normal = float3(-sign(ray.direction.x), 0, 0);
    }
    if (minDistance == yMin) {
        result.normal = float3(0, -sign(ray.direction.y), 0);
    }
    if (minDistance == zMin) {
        result.normal = float3(0, 0, -sign(ray.direction.z));
    }
    result.material = materials[box.material];
    return result;
}

RayHit testFloor(Ray ray) {
    RayHit result;
    result.hit = ray.direction.y < 0;
    result.distance = -ray.origin.y / ray.direction.y;
    result.position = ray.origin + result.distance * ray.direction;
    result.normal = up;
    result.fromInside = false;
    float xRemainder = abs(fmod(result.position.x, 2.0));
    float zRemainder = abs(fmod(result.position.z, 2.0));
    if (xRemainder < 0.05 || xRemainder > 1.95 || zRemainder < 0.05 || zRemainder > 1.95) {
        result.material = materials[1];
    } else {
        result.material = materials[0];
    }
    return result;
}


void test(inout RayHit hit, RayHit test)  {
    if (test.hit && test.distance < hit.distance) {
        hit = test;
    }
}

RayHit cast(Ray ray, inout uint seed) {
    Material defaultMaterial;
    defaultMaterial.color = float4(0,0,0,0);
    RayHit hit;
    hit.fromInside = false;
    hit.distance = 10000.0;
    hit.hit = false;
    hit.material = defaultMaterial;
    hit.position = up;
    hit.normal = up;
    for (int i = 0; i < sphereCount; i++) {
        test(hit, testSphere(ray, spheres[i]));
    }
    for (i = 0; i < boxCount; i++) {
        test(hit, testBox(ray, boxes[i]));
    }
    test(hit, testFloor(ray));
    while (hit.material.next != 0) {
        if (hit.material.passProbability < random(seed)) {
            break;
        }
        hit.material = materials[hit.material.next];
    }
    return hit;
}

float3 environmentLight(float3 direction) {
    float3 gradient = lerp(float3(.5,.5,.8), float3(0,0,.8), dot(direction, up));
    // sun radius: 5deg
    float sunHit = pow(max(0, dot(direction, sunDirection) - 0.9961946981) * 262.79, 2);
    float3 sun = float3(1,1,1) * sunHit * sunStrength;
    return gradient + sun;
}


float3 getSunIntensity(inout uint seed, float3 position) {
    Ray ray;
    float phi = 2*PI*random(seed);
    // here: no radius adjustment using sqrt to make the sun brighter in the center (similar to the pow in environmentLight)
    float r = random(seed) * 0.087488; // tan(5deg)
    float3 sunx = normalize(cross(up, sunDirection));
    float3 suny = normalize(cross(sunDirection, sunx));
    ray.origin = position;
    ray.direction = normalize(sunDirection + sin(phi) * r * sunx + cos(phi) * r * suny);
    RayHit hit = cast(ray, seed);
    return float3(2,2,2) * (1-hit.hit);
}

float3 getRefractionDirection(float3 normal, float3 direction, float oldRefindex, float refIndex) {
    float n = oldRefindex / refIndex;
    float cosIncoming = -dot(normal, direction);
    float sinRefracted2 = n*n * (1.0 - cosIncoming*cosIncoming);
    if (sinRefracted2 > 1.0) {
        return reflect(direction, normal);
    }
    float cosRefracted = sqrt(1.0-sinRefracted2);
    return n * direction + (n*cosIncoming - cosRefracted) * normal;
}

float frensel(float strength, float cosine) {
    return strength + (1-strength) * pow(1+cosine, 5);
}

float3 findColor(Ray ray, inout uint seed) {
    float3 rayColor = float3(1,1,1);
    float3 light = float3(0,0,0);
    float refractiveIndex = 1;

    for (uint i = 0; i <= bounces; i++) {
        RayHit hit = cast(ray, seed);
        if (!hit.hit) {
            light += rayColor * environmentLight(ray.direction);
            break;
        }
        float3 specularDirection = reflect(ray.direction, hit.normal);
        float3 diffuseDirection = normalize(hit.normal + randomDirection(seed));
        float specular = frensel(hit.material.specular, dot(ray.direction, hit.normal));
        float3 specularColor = lerp(hit.material.specularColor.rgb, hit.material.color.rgb, hit.material.metal);
        bool type = specular < random(seed);

        light += rayColor * hit.material.emissionColor.rgb * hit.material.emissionStrength;
        if (hit.fromInside) {
            float doReflection = frensel(1-hit.material.refractionProbability, -dot(ray.direction, hit.normal));
            float n = refractiveIndex / hit.material.refractiveIndex;
            float cosIncoming = -dot(hit.normal, ray.direction);
            doReflection = max(doReflection, n*n * (1.0 - cosIncoming*cosIncoming));

            if (doReflection > random(seed)) {
                ray.direction = specularDirection;
                hit.position -= 0.0001 * hit.normal;
            } else {
                ray.direction = getRefractionDirection(-hit.normal, ray.direction, refractiveIndex, 1.0);
                rayColor *= pow(hit.material.tint.rgb, hit.distance);
                refractiveIndex = 1.0;
                hit.position += 0.0001 * hit.normal;
            }
        } else if (random(seed) < hit.material.refractionProbability) {
            float doReflection = frensel(1-hit.material.refractionProbability, dot(ray.direction, hit.normal));
            float n = refractiveIndex / hit.material.refractiveIndex;
            float cosIncoming = -dot(hit.normal, ray.direction);
            doReflection = max(doReflection, n*n * (1.0 - cosIncoming*cosIncoming));

            if (doReflection > random(seed)) {
                ray.direction = specularDirection;
                hit.position += 0.0001 * hit.normal;
            } else {
                ray.direction = getRefractionDirection(hit.normal, ray.direction, refractiveIndex,  hit.material.refractiveIndex);
                refractiveIndex = hit.material.refractiveIndex;
                hit.position -= 0.0001 * hit.normal;
            }
        } else {
            rayColor *= type ? hit.material.color.rgb : specularColor;
            light += type * rayColor * getSunIntensity(seed, hit.position + 0.0001 * hit.normal) * dot(hit.normal, -ray.direction) * dot(hit.normal, sunDirection);
            ray.direction = type ? diffuseDirection : normalize(lerp(diffuseDirection, specularDirection, specular));
            hit.position += 0.0001 * hit.normal;
        }
        ray.origin = hit.position;
    }
    return light;
}

int startSeed, iterationCount;

[numthreads(16,16,1)]
void trace(uint3 id : SV_DispatchThreadID) {
    if (id.x >= width || id.y >= height) {
        return;
    }
    int index = id.x + id.y * width;
    uint seed = index + startSeed;
    for (int i = 0; i < iterationCount; i++) {
        float2 antiAliasingOffset = float2(random(seed), random(seed)) - 0.5;
        float2 pixel = float2(id.xy) + antiAliasingOffset;
        float2 screenPosition = (pixel / float2(width, height) * 2 - float2(1, 1)) * float2(float(width)/float(height), 1);
        float3 left = normalize(cross(up, viewDirection));
        float3 cameraUp = normalize(cross(viewDirection, left));
        float3 pixelDirection = normalize(viewDirection + screenPosition.x * left + screenPosition.y * cameraUp);
        Ray ray;
        ray.origin = position;
        ray.direction = pixelDirection;
        light[index] += findColor(ray, seed);
    }
}
